plugins {
    id 'xal.app'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 't.demo'
//    id 'stringfog'
}

apply plugin: 'stringfog'

//apply plugin:"com.bytedance.android.aabResGuard"

android {
    compileSdkVersion 31
    buildToolsVersion "29.0.2"

    defaultConfig {
//        applicationId "com.example.kalina_demo"
        // picku的 包名和appId com.swifthawk.picku.free -> 100710009
        applicationId "com.swifthawk.picku.free"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
//    implementation 'com.google.flatbuffers:flatbuffers-java:1.9.0'
//    implementation "org.ow2.asm:asm:9.5"
    implementation 'com.github.megatronking.stringfog:xor:3.0.0'
}

stringfog {
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    enable true
    fogPackages = ["com.example"]
}

//xal {
//    setAllowBackup(false)
//}

//aabResGuard {
////    mappingFile = file("mapping.txt").toPath() // Mapping file used for incremental obfuscation
//    whiteList = [
//            "*.R.raw.*",
//            "*.R.drawable.icon"
//    ]
//    obfuscatedBundleFileName = "duplicated-app.aab" // Obfuscated file name, must end with '.aab'
//    mergeDuplicatedRes = true // Whether to allow the merge of duplicate resources
//    enableFilterFiles = true // Whether to allow filter files
//    filterList = [ // file filter rules
//                   "*/arm64-v8a/*",
//                   "META-INF/*"
//    ]
//
//    enableFilterStrings = false // switch of filter strings
////    unusedStringPath = file("unused.txt").toPath() // strings will be filtered in this file
//    languageWhiteList = ["en", "zh"] // keep en,en-xx,zh,zh-xx etc. remove others.
//}